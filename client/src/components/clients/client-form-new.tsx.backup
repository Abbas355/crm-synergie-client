import { useState, useEffect, useRef } from "react";
import { z } from "zod";
import { useForm } from "react-hook-form";
import { zodResolver } from "@hookform/resolvers/zod";
import { useMutation, useQuery } from "@tanstack/react-query";
import { apiRequest, queryClient } from "@/lib/queryClient";
import { Client } from "@shared/schema";
import { useToast } from "@/hooks/use-toast";
import { getCommunesByCodePostal } from "@/lib/api-communes";
import { CommuneInput } from "@/components/ui/commune-input";
import { StatusBadge } from "@/components/ui/status-badge";

import {
  Dialog,
  DialogContent,
  DialogTitle,
} from "@/components/ui/dialog";
import { Button } from "@/components/ui/button";
import {
  Form,
  FormControl,
  FormField,
  FormItem,
  FormLabel,
  FormMessage,
  FormDescription,
} from "@/components/ui/form";
import {
  Select,
  SelectContent,
  SelectItem,
  SelectTrigger,
  SelectValue,
} from "@/components/ui/select";
import {
  Tabs,
  TabsContent,
  TabsList,
  TabsTrigger,
} from "@/components/ui/tabs";
import { Input } from "@/components/ui/input";
import { Textarea } from "@/components/ui/textarea";
import { 
  User,
  Mail, 
  Phone, 
  Calendar,
  ChevronLeft,
  X,
  Loader2,
  MapPin,
  FileText,
  Info,
  Tag,
  Search,
  ListChecks,
  Pencil,
  Trash2,
  AlertTriangle
} from "lucide-react";
import { format } from "date-fns";
import { fr } from "date-fns/locale";
import { Popover, PopoverContent, PopoverTrigger } from "@/components/ui/popover";
import { Calendar as CalendarComponent } from "@/components/ui/calendar";
import { useAuth } from "@/hooks/use-auth";

type ClientFormProps = {
  isOpen: boolean;
  onClose: () => void;
  client?: Client; // Optional for edit mode
};

const clientFormSchema = z.object({
  civilite: z.string().min(1, "La civilité est requise"),
  prenom: z.string().min(1, "Le prénom est requis"),
  nom: z.string().min(1, "Le nom est requis"),
  email: z.string().email("Email invalide"),
  mobile: z.string().min(8, "Numéro de mobile invalide"),
  fixe: z.string().optional(),
  dateNaissance: z.string()
    .regex(/^\d{2}\/\d{2}\/\d{4}$/, "Format de date invalide (jj/mm/aaaa)")
    .refine((date) => {
      const [day, month, year] = date.split('/').map(Number);
      const dateOfBirth = new Date(year, month - 1, day);
      const today = new Date();
      let age = today.getFullYear() - dateOfBirth.getFullYear();
      const monthDiff = today.getMonth() - dateOfBirth.getMonth();
      if (monthDiff < 0 || (monthDiff === 0 && today.getDate() < dateOfBirth.getDate())) {
        age--;
      }
      return age >= 18;
    }, { message: "Le client doit avoir au moins 18 ans" }),
  adresse: z.string().min(1, "L'adresse est requise"),
  codePostal: z.string().min(5, "Code postal invalide"),
  ville: z.string().min(1, "La ville est requise"),
  produit: z.string().min(1, "Le produit est requis"),
  identifiantContrat: z.string().optional(),
  carteSIM: z.string().optional(),
  portabilite: z.string().optional(),
  numeroPorter: z.string().optional(),
  source: z.string().min(1, "La source est requise"),
  typeRecommandation: z.string().optional(),
  civiliteProspect: z.string().optional(),
  prenomProspect: z.string().optional(),
  nomProspect: z.string().optional(),
  mobileProspect: z.string().optional(),
  codePostalProspect: z.string().optional(),
  villeProspect: z.string().optional(),
  commentaire: z.string().optional(),
  dateSignature: z.date().optional(),
  dateRendezVous: z.date().optional(),
  dateInstallation: z.date().optional(),
  status: z.string().default("enregistre"),
  userId: z.number(),
}).refine((data) => {
  // Vérifier format identifiant contrat selon produit choisi
  if (data.produit) {
    if (["Freebox Pop", "Freebox Essentiel", "Freebox Ultra"].includes(data.produit)) {
      if (!data.identifiantContrat || !/^FO\d{8}$/.test(data.identifiantContrat)) {
        return false;
      }
    } else if (data.produit === "Forfait 5G") {
      if (!data.identifiantContrat || !/^\d{8}$/.test(data.identifiantContrat)) {
        return false;
      }
      // Vérifier que la carte SIM est sélectionnée pour Forfait 5G
      if (!data.carteSIM) {
        return false;
      }
    }
  }
  
  // Vérifier la portabilité
  if (data.portabilite === "Portabilité" && !data.numeroPorter) {
    return false;
  }
  
  // Pour source = Recommandation, vérifier les champs prospects
  if (data.source === "Recommandation" && data.typeRecommandation === "Prospect") {
    const hasProspectName = data.prenomProspect || data.nomProspect;
    if (!hasProspectName || !data.mobileProspect || !data.codePostalProspect || !data.villeProspect) {
      return false;
    }
  }

  // Vérifier que la date de rendez-vous est fournie pour le statut "rendez-vous"
  if (data.status === "rendez-vous" && !data.dateRendezVous) {
    return false;
  }

  // Vérifier que la date d'installation est fournie pour le statut "installation"
  if (data.status === "installation" && !data.dateInstallation) {
    return false;
  }
  
  return true;
}, {
  message: "Veuillez remplir tous les champs requis selon les règles spécifiques",
  path: ["form"]
});

type FormValues = z.infer<typeof clientFormSchema>;

const civiliteOptions = [
  { value: "Mr", label: "Mr" },
  { value: "Mme", label: "Mme" },
  { value: "Mlle", label: "Mlle" },
];

const sourceOptions = [
  { value: "Prospection direct", label: "Prospection direct" },
  { value: "Flyer", label: "Flyer" },
  { value: "Recommandation", label: "Recommandation" },
  { value: "Réseaux sociaux", label: "Réseaux sociaux" },
  { value: "Site Web", label: "Site Web" },
  { value: "Autocollant", label: "Autocollant" },
  { value: "Autre", label: "Autre" },
];

const produitOptions = [
  { value: "Freebox Pop", label: "Freebox Pop" },
  { value: "Freebox Essentiel", label: "Freebox Essentiel" },
  { value: "Freebox Ultra", label: "Freebox Ultra" },
  { value: "Forfait 5G", label: "Forfait 5G" },
];

export function ClientForm({ isOpen, onClose, client }: ClientFormProps) {
  const { toast } = useToast();
  const [activeTab, setActiveTab] = useState("personnel");
  const { user } = useAuth();
  const [showSuccess, setShowSuccess] = useState(false);
  const [dateSignatureOpen, setDateSignatureOpen] = useState(false);
  const [editMode, setEditMode] = useState(false);
  const [confirmDelete, setConfirmDelete] = useState(false);

  // Récupérer les cartes SIM disponibles depuis l'API
  const { data: simCardsData } = useQuery({
    queryKey: ["/api/sim-cards"],
    queryFn: async () => {
      const res = await fetch("/api/sim-cards?statut=disponible");
      if (!res.ok) throw new Error("Erreur lors de la récupération des cartes SIM");
      return res.json();
    },
    enabled: isOpen, // Ne récupérer les cartes SIM que si le formulaire est ouvert
  });

  // Options de cartes SIM à partir des données de l'API
  // La structure de retour est {simCards: [...], stats: {...}}
  const carteSIMOptions = simCardsData?.simCards?.map((card: any) => ({
    value: card.id.toString(),
    label: card.numero,
  })) || [];
  
  // Ajouter des logs pour déboguer
  console.log("Client reçu dans le formulaire:", client);
  
  // Si c'est un nouveau client, passer directement en mode édition
  useEffect(() => {
    setEditMode(!client);
  }, [client]);
  
  // Nous avons déplacé la logique de formatage directement dans l'événement onChange du champ de date


  // Pour les états des datepickers
  const [dateRendezVousOpen, setDateRendezVousOpen] = useState(false);
  const [dateInstallationOpen, setDateInstallationOpen] = useState(false);
  
  const form = useForm<FormValues>({
    resolver: zodResolver(clientFormSchema),
    defaultValues: {
          civilite: "",
          prenom: "",
          nom: "",
          email: "",
          mobile: "",
          fixe: "",
          dateNaissance: "",
          adresse: "",
          codePostal: "",
          ville: "",
          produit: "",
          identifiantContrat: "",
          carteSIM: "",
          portabilite: "",
          numeroPorter: "",
          source: "",
          typeRecommandation: "",
          civiliteProspect: "",
          prenomProspect: "",
          nomProspect: "",
          mobileProspect: "",
          codePostalProspect: "",
          villeProspect: "",
          commentaire: "",
          status: "enregistre",
          userId: user?.id || 0,
          dateSignature: new Date(),
          dateRendezVous: undefined,
          dateInstallation: undefined,
    }
  });
  
  // Utiliser useEffect pour réinitialiser le formulaire quand le client change
  useEffect(() => {
    if (client && isOpen) {
      console.log("Réinitialisation du formulaire avec les données du client:", client);
      
      // Prétraitement des noms si prenom/nom non renseignés mais que name existe
      let extractedPrenom = client.prenom || "";
      let extractedNom = client.nom || "";
      
      if (client.name && (!client.prenom || !client.nom)) {
        const nameParts = client.name.split(' ');
        if (nameParts.length >= 2) {
          extractedPrenom = extractedPrenom || nameParts[0];
          extractedNom = extractedNom || nameParts.slice(1).join(' ');
        } else if (nameParts.length === 1) {
          // Si un seul mot, considérer comme nom
          extractedNom = extractedNom || nameParts[0];
        }
      }
      
      // Conversion des valeurs pour le formulaire
      const formValues = {
        ...client,
        dateSignature: client.dateSignature ? new Date(client.dateSignature) : new Date(),
        userId: client.userId || user?.id || 0,
        // Convertir les valeurs null en chaînes vides pour éviter les erreurs
        prenom: extractedPrenom,
        nom: extractedNom,
        email: client.email || "",
        mobile: client.phone || "",  // Noter que le champ s'appelle phone dans l'API mais mobile dans le formulaire
        fixe: client.fixe || "",
        dateNaissance: client.dateNaissance || "",
        adresse: client.adresse || "",
        codePostal: client.codePostal || "",
        ville: client.ville || "",
        produit: client.produit || "",
        identifiantContrat: client.identifiantContrat || "",
        carteSIM: client.carteSIM || "",
        portabilite: client.portabilite || "",
        numeroPorter: client.numeroPorter || "",
        source: client.source || "",
        typeRecommandation: client.typeRecommandation || "",
        civiliteProspect: client.civiliteProspect || "",
        prenomProspect: client.prenomProspect || "",
        nomProspect: client.nomProspect || "",
        mobileProspect: client.mobileProspect || "",
        codePostalProspect: client.codePostalProspect || "",
        villeProspect: client.villeProspect || "",
        commentaire: client.commentaire || "",
        status: client.status || "enregistre",
        civilite: client.civilite || "",
      };
      
      // Réinitialiser le formulaire avec toutes les valeurs en s'assurant qu'aucune n'est null
      form.reset(formValues);
    }
  }, [client, isOpen, user?.id]);

  const handleTabChange = (newTab: string) => {
    // Avant de passer à un autre onglet, vérifier si les champs de l'onglet actuel sont valides
    if (activeTab === "personnel") {
      // Valider les champs de l'onglet personnel
      const personnelFields = ["civilite", "prenom", "nom", "dateNaissance", "email", "mobile"];
      const isValid = personnelFields.every(field => !form.formState.errors[field as keyof FormValues]);
      
      if (!isValid) {
        toast({
          title: "Erreur de validation",
          description: "Veuillez compléter correctement tous les champs obligatoires avant de continuer.",
          variant: "destructive",
        });
        
        // Forcer la validation de tous les champs
        personnelFields.forEach(field => {
          form.trigger(field as keyof FormValues);
        });
        
        return;
      }
    } else if (activeTab === "adresse") {
      // Valider les champs de l'onglet adresse
      const adresseFields = ["adresse", "codePostal", "ville"];
      const isValid = adresseFields.every(field => !form.formState.errors[field as keyof FormValues]);
      
      if (!isValid) {
        toast({
          title: "Erreur de validation",
          description: "Veuillez compléter correctement tous les champs obligatoires avant de continuer.",
          variant: "destructive",
        });
        
        // Forcer la validation de tous les champs
        adresseFields.forEach(field => {
          form.trigger(field as keyof FormValues);
        });
        
        return;
      }
    } else if (activeTab === "contrat") {
      // Valider les champs de l'onglet contrat
      const contratFields = ["produit", "identifiantContrat", "dateSignature"];
      
      // Ajouter les champs conditionnels selon le produit
      if (form.watch("produit") === "Forfait 5G") {
        contratFields.push("portabilite");
        contratFields.push("carteSIM"); // Ajout du champ carteSIM obligatoire pour Forfait 5G
        if (form.watch("portabilite") === "Portabilité") {
          contratFields.push("numeroPorter");
        }
      }
      
      const isValid = contratFields.every(field => !form.formState.errors[field as keyof FormValues]);
      
      if (!isValid) {
        toast({
          title: "Erreur de validation",
          description: "Veuillez compléter correctement tous les champs obligatoires avant de continuer.",
          variant: "destructive",
        });
        
        // Forcer la validation de tous les champs
        contratFields.forEach(field => {
          form.trigger(field as keyof FormValues);
        });
        
        return;
      }
    } else if (activeTab === "dates") {
      // Valider les champs de l'onglet dates selon le statut
      const dateFields: (keyof FormValues)[] = [];
      
      // Si le statut est "rendez-vous", la date de rendez-vous est obligatoire
      if (form.watch("status") === "rendez-vous") {
        dateFields.push("dateRendezVous");
      }
      
      // Si le statut est "installation", la date d'installation est obligatoire
      if (form.watch("status") === "installation") {
        dateFields.push("dateInstallation");
      }
      
      if (dateFields.length > 0) {
        const isValid = dateFields.every(field => !form.formState.errors[field]);
        
        if (!isValid) {
          toast({
            title: "Erreur de validation",
            description: `Veuillez sélectionner une date ${form.watch("status") === "rendez-vous" ? "de rendez-vous" : "d'installation"} valide.`,
            variant: "destructive",
          });
          
          // Forcer la validation des champs de date
          dateFields.forEach(field => {
            form.trigger(field);
          });
          
          return;
        }
      }
    }
    
    setActiveTab(newTab);
  };

  const createMutation = useMutation({
    mutationFn: async (data: FormValues) => {
      // Log des données soumises pour déboguer
      console.log("Données soumises:", JSON.stringify(data));
      
      // S'assurer que le nom et le prénom sont des strings
      const sanitizedData = {
        ...data,
        nom: data.nom?.toString().trim() || "",
        prenom: data.prenom?.toString().trim() || ""
      };
      
      console.log("Données après nettoyage:", JSON.stringify(sanitizedData));
      
      // Si c'est un nouveau client, on fait un POST, sinon un PUT
      if (client) {
        const res = await apiRequest("PUT", `/api/clients/${client.id}`, sanitizedData);
        return res.json();
      } else {
        const res = await apiRequest("POST", "/api/clients", sanitizedData);
        return res.json();
      }
    },
    onSuccess: (data: any) => {
      queryClient.invalidateQueries({ queryKey: ["/api/clients"] });
      
      // Si une carte SIM a été assignée, mettre à jour son statut
      if (form.getValues("produit") === "Forfait 5G" && form.getValues("carteSIM")) {
        // Appeler l'API pour attribuer la carte SIM
        apiRequest("POST", "/api/sim-cards/assign", {
          clientId: data.id,
          simCardId: parseInt(form.getValues("carteSIM"))
        })
        .then(() => {
          queryClient.invalidateQueries({ queryKey: ["/api/sim-cards"] });
        })
        .catch((error) => {
          console.error("Erreur lors de l'attribution de la carte SIM:", error);
        });
      }
      
      // Afficher le message de succès (persistant jusqu'à ce que l'utilisateur clique sur le bouton)
      setShowSuccess(true);
      
      // Plus de fermeture automatique - l'utilisateur doit cliquer sur le bouton

      // Créer automatiquement une tâche si un commentaire est fourni
      if (form.getValues("commentaire")) {
        const taskData = {
          title: `Tâche pour ${form.getValues("prenom")} ${form.getValues("nom")}`,
          description: form.getValues("commentaire"),
          status: "pending",
          priority: "medium",
          dueDate: new Date(Date.now() + 7 * 24 * 60 * 60 * 1000), // Une semaine plus tard
          clientId: data.id,
          userId: user?.id || 0,
        };
        
        apiRequest("POST", "/api/tasks", taskData)
          .then(() => {
            queryClient.invalidateQueries({ queryKey: ["/api/tasks"] });
          })
          .catch((error) => {
            console.error("Erreur lors de la création de la tâche:", error);
          });
      }
    },
    onError: (error) => {
      toast({
        title: "Erreur",
        description: `Une erreur est survenue : ${error.message}`,
        variant: "destructive",
      });
    },
  });

  const onSubmit = (data: FormValues) => {
    createMutation.mutate(data);
  };

  const isPending = createMutation.isPending;
  
  // Mutation pour supprimer un client
  const deleteMutation = useMutation({
    mutationFn: async () => {
      if (!client) return;
      const res = await apiRequest("DELETE", `/api/clients/${client.id}`);
      return res.json();
    },
    onSuccess: () => {
      queryClient.invalidateQueries({ queryKey: ["/api/clients"] });
      toast({
        title: "Client supprimé",
        description: "Le client a été supprimé avec succès",
      });
      onClose();
    },
    onError: (error) => {
      toast({
        title: "Erreur",
        description: `Une erreur est survenue : ${error.message}`,
        variant: "destructive",
      });
    },
  });

  const handleDelete = () => {
    if (confirmDelete) {
      deleteMutation.mutate();
    } else {
      setConfirmDelete(true);
    }
  };
  
  // Constantes pour les statuts de client
  const clientStatusOptions = [
    { value: "enregistre", label: "Enregistré" },
    { value: "rendez-vous", label: "Rendez-vous" },
    { value: "installation", label: "Installation" },
    { value: "valide", label: "Validé" },
    { value: "post-production", label: "Post-production" },
    { value: "abandonne", label: "Abandonné" },
    { value: "resiliation", label: "Résiliation" },
    { value: "valide 7 jours", label: "Validé 7 jours" }
  ];
  
  // Pour les options de portabilité
  const portabiliteOptions = [
    { value: "Portabilité", label: "Portabilité" },
    { value: "Nouveau numéro", label: "Nouveau numéro" },
  ];
  
  // Pour les options de recommandation
  const typeRecommandationOptions = [
    { value: "Client", label: "Client" },
    { value: "Prospect", label: "Prospect" },
  ];

  return (
    <Dialog open={isOpen} onOpenChange={(open) => !open && onClose()}>
      <DialogContent className="max-w-5xl max-h-[90vh] overflow-y-auto bg-white shadow-lg border border-gray-200">
        <div className="flex items-center justify-between sticky top-0 bg-white z-10 py-2">
          <DialogTitle className="text-xl font-semibold text-gray-800">
            {client ? (
              <div className="flex items-center gap-2">
                <span>Client:</span>
                <span className="text-blue-600">{client.prenom} {client.nom}</span>
                {client.status && (
                  <StatusBadge status={client.status} />
                )}
              </div>
            ) : (
              "Nouveau Client"
            )}
          </DialogTitle>
          <div className="flex items-center gap-3">
            {client && (
              <Button
                type="button"
                variant={editMode ? "outline" : "secondary"}
                onClick={() => setEditMode(!editMode)}
                className={`${editMode ? "text-gray-600 hover:bg-gray-100" : "text-blue-600 bg-blue-50 hover:bg-blue-100"}`}
              >
                <Pencil className="h-4 w-4 mr-1" />
                {editMode ? "Annuler" : "Modifier"}
              </Button>
            )}
            {client && editMode && (
              <Button
                type="button"
                variant="destructive"
                onClick={handleDelete}
                className="text-red-600 bg-red-50 hover:bg-red-100 border-red-200"
              >
                <Trash2 className="h-4 w-4 mr-1" />
                {confirmDelete ? "Confirmer" : "Supprimer"}
              </Button>
            )}
            <Button
              type="button"
              variant="ghost"
              className="text-gray-500"
              onClick={onClose}
            >
              <X className="h-4 w-4" />
            </Button>
          </div>
        </div>

        {showSuccess ? (
          <div className="flex flex-col items-center justify-center py-8">
            <div className="w-16 h-16 bg-green-100 rounded-full flex items-center justify-center mb-4">
              <svg className="w-8 h-8 text-green-500" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M5 13l4 4L19 7" />
              </svg>
            </div>
            <h3 className="text-xl font-semibold text-gray-800 mb-2">Client {client ? "mis à jour" : "créé"} avec succès!</h3>
            <p className="text-gray-600 mb-6 text-center">
              Toutes les informations ont été {client ? "mises à jour" : "enregistrées"} dans la base de données.
            </p>
            <div className="flex gap-4">
              <Button
                variant="secondary"
                onClick={onClose}
                className="px-6"
              >
                Fermer
              </Button>
              {!client && (
                <Button
                  variant="default"
                  onClick={() => {
                    setShowSuccess(false);
                    form.reset({
                      civilite: "",
                      prenom: "",
                      nom: "",
                      email: "",
                      mobile: "",
                      fixe: "",
                      dateNaissance: "",
                      adresse: "",
                      codePostal: "",
                      ville: "",
                      produit: "",
                      identifiantContrat: "",
                      carteSIM: "",
                      portabilite: "",
                      numeroPorter: "",
                      source: "",
                      typeRecommandation: "",
                      civiliteProspect: "",
                      prenomProspect: "",
                      nomProspect: "",
                      mobileProspect: "",
                      codePostalProspect: "",
                      villeProspect: "",
                      commentaire: "",
                      status: "enregistre",
                      userId: user?.id || 0,
                      dateSignature: new Date(),
                      dateRendezVous: undefined,
                      dateInstallation: undefined,
                    });
                  }}
                  className="px-6"
                >
                  Créer un autre client
                </Button>
              )}
            </div>
          </div>
        ) : (
          <Form {...form}>
            <form onSubmit={form.handleSubmit(onSubmit)}>
              <Tabs defaultValue="personnel" value={activeTab} onValueChange={handleTabChange}>
                <TabsList className="grid grid-cols-4 max-w-3xl mb-4">
                  <TabsTrigger value="personnel" className="text-xs sm:text-sm">
                    <User className="h-4 w-4 mr-1" />
                    <span className="hidden sm:inline">Information</span>
                    <span className="sm:hidden">Info</span>
                  </TabsTrigger>
                  <TabsTrigger value="adresse" className="text-xs sm:text-sm">
                    <MapPin className="h-4 w-4 mr-1" />
                    <span>Adresse</span>
                  </TabsTrigger>
                  <TabsTrigger value="contrat" className="text-xs sm:text-sm">
                    <FileText className="h-4 w-4 mr-1" />
                    <span>Contrat</span>
                  </TabsTrigger>
                  <TabsTrigger value="source" className="text-xs sm:text-sm">
                    <Info className="h-4 w-4 mr-1" />
                    <span>Source</span>
                  </TabsTrigger>
                </TabsList>

                <TabsContent value="personnel" className="bg-white p-4 rounded-md space-y-4">
                  <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                    <FormField
                      control={form.control}
                      name="civilite"
                      render={({ field }) => (
                        <FormItem>
                          <FormLabel className="text-gray-700">Civilité <span className="text-red-500">*</span></FormLabel>
                          <Select
                            onValueChange={field.onChange}
                            defaultValue={field.value}
                            disabled={client && !editMode}
                          >
                            <FormControl>
                              <SelectTrigger className="bg-white border-gray-200">
                                <SelectValue placeholder="Sélectionner une civilité" />
                              </SelectTrigger>
                            </FormControl>
                            <SelectContent>
                              {civiliteOptions.map((option) => (
                                <SelectItem key={option.value} value={option.value}>
                                  {option.label}
                                </SelectItem>
                              ))}
                            </SelectContent>
                          </Select>
                          <FormMessage />
                        </FormItem>
                      )}
                    />

                    <FormField
                      control={form.control}
                      name="prenom"
                      render={({ field }) => (
                        <FormItem>
                          <FormLabel className="text-gray-700">Prénom <span className="text-red-500">*</span></FormLabel>
                          {client && !editMode ? (
                            <div className="p-2 border rounded bg-gray-50">
                              {field.value}
                            </div>
                          ) : (
                            <FormControl>
                              <Input placeholder="Prénom" className="bg-white border-gray-200" {...field} disabled={client && !editMode} />
                            </FormControl>
                          )}
                          <FormMessage />
                        </FormItem>
                      )}
                    />

                    <FormField
                      control={form.control}
                      name="nom"
                      render={({ field }) => (
                        <FormItem>
                          <FormLabel className="text-gray-700">Nom <span className="text-red-500">*</span></FormLabel>
                          {client && !editMode ? (
                            <div className="p-2 border rounded bg-gray-50">
                              {field.value}
                            </div>
                          ) : (
                            <FormControl>
                              <Input placeholder="Nom" className="bg-white border-gray-200" {...field} disabled={client && !editMode} />
                            </FormControl>
                          )}
                          <FormMessage />
                        </FormItem>
                      )}
                    />

                    <FormField
                      control={form.control}
                      name="dateNaissance"
                      render={({ field }) => (
                        <FormItem>
                          <FormLabel className="text-gray-700">Date de naissance <span className="text-red-500">*</span></FormLabel>
                          {client && !editMode ? (
                            <div className="p-2 border rounded bg-gray-50">
                              {field.value}
                            </div>
                          ) : (
                            <FormControl>
                              <Input 
                                placeholder="JJ/MM/AAAA" 
                                className="bg-white border-gray-200" 
                                {...field} 
                                disabled={client && !editMode}
                                onChange={(e) => {
                                  // Formater automatiquement la date en JJ/MM/AAAA
                                  let value = e.target.value.replace(/\D/g, '');
                                  if (value.length > 8) value = value.slice(0, 8);
                                  
                                  // Ajouter les / automatiquement
                                  if (value.length > 4) {
                                    value = value.slice(0, 2) + '/' + value.slice(2, 4) + '/' + value.slice(4);
                                  } else if (value.length > 2) {
                                    value = value.slice(0, 2) + '/' + value.slice(2);
                                  }
                                  
                                  field.onChange(value);
                                }}
                              />
                            </FormControl>
                          )}
                          <FormDescription className="text-xs text-gray-500">
                            Format: JJ/MM/AAAA (18 ans minimum)
                          </FormDescription>
                          <FormMessage />
                        </FormItem>
                      )}
                    />

                    <FormField
                      control={form.control}
                      name="email"
                      render={({ field }) => (
                        <FormItem>
                          <FormLabel className="text-gray-700">Email <span className="text-red-500">*</span></FormLabel>
                          {client && !editMode ? (
                            <div className="p-2 border rounded bg-gray-50">
                              {field.value}
                            </div>
                          ) : (
                            <FormControl>
                              <Input placeholder="Email" className="bg-white border-gray-200" {...field} disabled={client && !editMode} />
                            </FormControl>
                          )}
                          <FormMessage />
                        </FormItem>
                      )}
                    />

                    <FormField
                      control={form.control}
                      name="mobile"
                      render={({ field }) => (
                        <FormItem>
                          <FormLabel className="text-gray-700">Mobile <span className="text-red-500">*</span></FormLabel>
                          {client && !editMode ? (
                            <div className="p-2 border rounded bg-gray-50">
                              {field.value}
                            </div>
                          ) : (
                            <FormControl>
                              <Input placeholder="Mobile" className="bg-white border-gray-200" {...field} disabled={client && !editMode} />
                            </FormControl>
                          )}
                          <FormMessage />
                        </FormItem>
                      )}
                    />

                    <FormField
                      control={form.control}
                      name="fixe"
                      render={({ field }) => (
                        <FormItem>
                          <FormLabel className="text-gray-700">Téléphone fixe</FormLabel>
                          {client && !editMode ? (
                            <div className="p-2 border rounded bg-gray-50">
                              {field.value || "Non spécifié"}
                            </div>
                          ) : (
                            <FormControl>
                              <Input placeholder="Téléphone fixe" className="bg-white border-gray-200" {...field} disabled={client && !editMode} />
                            </FormControl>
                          )}
                          <FormMessage />
                        </FormItem>
                      )}
                    />
                  </div>
                  
                  <div className="flex justify-end pt-4">
                    <Button
                      type="button"
                      onClick={() => handleTabChange("adresse")}
                      className="bg-blue-600 hover:bg-blue-700 text-white"
                      disabled={isPending}
                    >
                      Suivant
                    </Button>
                  </div>
                </TabsContent>

                <TabsContent value="adresse" className="bg-white p-4 rounded-md space-y-4">
                  <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                    <FormField
                      control={form.control}
                      name="adresse"
                      render={({ field }) => (
                        <FormItem className="col-span-full">
                          <FormLabel className="text-gray-700">Adresse <span className="text-red-500">*</span></FormLabel>
                          {client && !editMode ? (
                            <div className="p-2 border rounded bg-gray-50">
                              {field.value}
                            </div>
                          ) : (
                            <FormControl>
                              <Input placeholder="Adresse" className="bg-white border-gray-200" {...field} disabled={client && !editMode} />
                            </FormControl>
                          )}
                          <FormMessage />
                        </FormItem>
                      )}
                    />

                    <FormField
                      control={form.control}
                      name="codePostal"
                      render={({ field }) => (
                        <FormItem>
                          <FormLabel className="text-gray-700">Code postal <span className="text-red-500">*</span></FormLabel>
                          {client && !editMode ? (
                            <div className="p-2 border rounded bg-gray-50">
                              {field.value}
                            </div>
                          ) : (
                            <FormControl>
                              <CommuneInput 
                                value={field.value} 
                                onChange={(value) => {
                                  field.onChange(value);
                                  // Récupérer les communes correspondantes
                                  if (value && value.length === 5) {
                                    getCommunesByCodePostal(value)
                                      .then(communes => {
                                        if (communes.length === 1) {
                                          // S'il n'y a qu'une seule commune, la sélectionner automatiquement
                                          form.setValue("ville", communes[0].nom);
                                        }
                                      })
                                      .catch(err => console.error(err));
                                  }
                                }}
                                className="bg-white border-gray-200" 
                                disabled={client && !editMode} 
                              />
                            </FormControl>
                          )}
                          <FormMessage />
                        </FormItem>
                      )}
                    />

                    <FormField
                      control={form.control}
                      name="ville"
                      render={({ field }) => (
                        <FormItem>
                          <FormLabel className="text-gray-700">Ville <span className="text-red-500">*</span></FormLabel>
                          {client && !editMode ? (
                            <div className="p-2 border rounded bg-gray-50">
                              {field.value}
                            </div>
                          ) : (
                            <FormControl>
                              <Input placeholder="Ville" className="bg-white border-gray-200" {...field} disabled={client && !editMode} />
                            </FormControl>
                          )}
                          <FormMessage />
                        </FormItem>
                      )}
                    />
                  </div>
                  
                  <div className="flex justify-between pt-4">
                    <Button
                      type="button"
                      variant="outline"
                      onClick={() => handleTabChange("personnel")}
                      className="text-gray-600 hover:bg-gray-100"
                    >
                      <ChevronLeft className="h-4 w-4 mr-1" />
                      Précédent
                    </Button>
                    <Button
                      type="button"
                      onClick={() => handleTabChange("contrat")}
                      className="bg-blue-600 hover:bg-blue-700 text-white"
                      disabled={isPending}
                    >
                      Suivant
                    </Button>
                  </div>
                </TabsContent>

                <TabsContent value="contrat" className="bg-white p-4 rounded-md space-y-4">
                  <div className="flex flex-col gap-4">
                    <div className="grid grid-cols-1 sm:grid-cols-2 gap-4">
                      <FormField
                        control={form.control}
                        name="status"
                        render={({ field }) => (
                          <FormItem>
                            <FormLabel className="text-gray-700 font-medium">Statut du client <span className="text-red-500">*</span></FormLabel>
                            <Select
                              onValueChange={field.onChange}
                              defaultValue={field.value}
                              disabled={client && !editMode}
                            >
                              <FormControl>
                                <SelectTrigger className="bg-white border-gray-200 h-10">
                                  <SelectValue placeholder="Sélectionner un statut" />
                                </SelectTrigger>
                              </FormControl>
                              <SelectContent>
                                {clientStatusOptions.map((option) => (
                                  <SelectItem key={option.value} value={option.value}>
                                    {option.label}
                                  </SelectItem>
                                ))}
                              </SelectContent>
                            </Select>
                            <FormMessage />
                          </FormItem>
                        )}
                      />
                    
                      <FormField
                        control={form.control}
                        name="produit"
                        render={({ field }) => (
                          <FormItem>
                            <FormLabel className="text-gray-700 font-medium">Produit <span className="text-red-500">*</span></FormLabel>
                            <Select
                              onValueChange={(value) => {
                                field.onChange(value);
                                // Reset carteSIM when product changes
                                form.setValue("carteSIM", "");
                                if (value !== "Forfait 5G") {
                                  form.setValue("portabilite", "");
                                  form.setValue("numeroPorter", "");
                                }
                              }}
                              defaultValue={field.value}
                              disabled={client && !editMode}
                            >
                              <FormControl>
                                <SelectTrigger className="bg-white border-gray-200 h-10">
                                  <SelectValue placeholder="Sélectionner un produit" />
                                </SelectTrigger>
                              </FormControl>
                              <SelectContent>
                                {produitOptions.map((option) => (
                                  <SelectItem key={option.value} value={option.value}>
                                    {option.label}
                                  </SelectItem>
                                ))}
                              </SelectContent>
                            </Select>
                            <FormMessage />
                          </FormItem>
                        )}
                      />
                    </div>

                    <div className="grid grid-cols-1 sm:grid-cols-2 gap-4">
                      <FormField
                        control={form.control}
                        name="identifiantContrat"
                        render={({ field }) => (
                          <FormItem>
                            <FormLabel className="text-gray-700 font-medium">Identifiant contrat <span className="text-red-500">*</span></FormLabel>
                            {client && !editMode ? (
                              <div className="p-2 border rounded bg-gray-50">
                                {field.value || "Non spécifié"}
                              </div>
                            ) : (
                              <FormControl>
                                <Input 
                                  placeholder={
                                    ["Freebox Pop", "Freebox Essentiel", "Freebox Ultra"].includes(form.watch("produit"))
                                      ? "FO35012345"
                                      : "52012345"
                                  } 
                                  className="bg-white border-gray-200 h-10"
                                  {...field} 
                                  disabled={client && !editMode}
                                />
                              </FormControl>
                            )}
                            <FormDescription className="text-xs text-gray-500">
                              {["Freebox Pop", "Freebox Essentiel", "Freebox Ultra"].includes(form.watch("produit"))
                                ? "Format: FO suivi de 8 chiffres"
                                : "Format: 8 chiffres"
                              }
                            </FormDescription>
                            <FormMessage />
                          </FormItem>
                        )}
                      />
                
                    <FormField
                      control={form.control}
                      name="dateSignature"
                      render={({ field }) => (
                        <FormItem className="flex flex-col">
                          <FormLabel className="text-gray-700">Date de signature <span className="text-red-500">*</span></FormLabel>
                          <Popover open={dateSignatureOpen} onOpenChange={setDateSignatureOpen}>
                            <PopoverTrigger asChild>
                              <FormControl>
                                <Button
                                  variant="outline"
                                  className={`w-full bg-white border-gray-200 text-left font-normal ${!field.value ? "text-gray-400" : "text-gray-900"}`}
                                  disabled={client && !editMode}
                                >
                                  {field.value ? (
                                    format(field.value, "dd/MM/yyyy", { locale: fr })
                                  ) : (
                                    <span>Sélectionner une date</span>
                                  )}
                                  <Calendar className="ml-auto h-4 w-4 opacity-50" />
                                </Button>
                              </FormControl>
                            </PopoverTrigger>
                            <PopoverContent className="w-auto p-0" align="start">
                              <CalendarComponent
                                mode="single"
                                selected={field.value}
                                onSelect={(date) => {
                                  field.onChange(date);
                                  setDateSignatureOpen(false);
                                }}
                                disabled={client && !editMode}
                                initialFocus
                                locale={fr}
                              />
                            </PopoverContent>
                          </Popover>
                          <FormMessage />
                        </FormItem>
                      )}
                    />

                    {form.watch("produit") === "Forfait 5G" && (
                      <>
                        <FormField
                          control={form.control}
                          name="carteSIM"
                          render={({ field }) => (
                            <FormItem>
                              <FormLabel className="text-gray-700">Carte SIM <span className="text-red-500">*</span></FormLabel>
                              <Select
                                onValueChange={field.onChange}
                                defaultValue={field.value}
                                disabled={client && !editMode}
                              >
                                <FormControl>
                                  <SelectTrigger className="bg-white border-gray-200">
                                    <SelectValue placeholder="Sélectionner une carte SIM" />
                                  </SelectTrigger>
                                </FormControl>
                                <SelectContent>
                                  {carteSIMOptions.map((option) => (
                                    <SelectItem key={option.value} value={option.value}>
                                      {option.label}
                                    </SelectItem>
                                  ))}
                                </SelectContent>
                              </Select>
                              <FormMessage />
                            </FormItem>
                          )}
                        />

                        <FormField
                          control={form.control}
                          name="portabilite"
                          render={({ field }) => (
                            <FormItem>
                              <FormLabel className="text-gray-700">Portabilité <span className="text-red-500">*</span></FormLabel>
                              <Select
                                onValueChange={(value) => {
                                  field.onChange(value);
                                  if (value !== "Portabilité") {
                                    form.setValue("numeroPorter", "");
                                  }
                                }}
                                defaultValue={field.value}
                                disabled={client && !editMode}
                              >
                                <FormControl>
                                  <SelectTrigger className="bg-white border-gray-200">
                                    <SelectValue placeholder="Sélectionner une option" />
                                  </SelectTrigger>
                                </FormControl>
                                <SelectContent>
                                  {portabiliteOptions.map((option) => (
                                    <SelectItem key={option.value} value={option.value}>
                                      {option.label}
                                    </SelectItem>
                                  ))}
                                </SelectContent>
                              </Select>
                              <FormMessage />
                            </FormItem>
                          )}
                        />

                        {form.watch("portabilite") === "Portabilité" && (
                          <FormField
                            control={form.control}
                            name="numeroPorter"
                            render={({ field }) => (
                              <FormItem>
                                <FormLabel className="text-gray-700">Numéro à porter <span className="text-red-500">*</span></FormLabel>
                                {client && !editMode ? (
                                  <div className="p-2 border rounded bg-gray-50">
                                    {field.value || "Non spécifié"}
                                  </div>
                                ) : (
                                  <FormControl>
                                    <Input placeholder="Numéro à porter" className="bg-white border-gray-200" {...field} disabled={client && !editMode} />
                                  </FormControl>
                                )}
                                <FormMessage />
                              </FormItem>
                            )}
                          />
                        )}
                      </>
                    )}

                    {form.watch("status") === "rendez-vous" && (
                      <FormField
                        control={form.control}
                        name="dateRendezVous"
                        render={({ field }) => (
                          <FormItem className="flex flex-col">
                            <FormLabel className="text-gray-700">Date du rendez-vous <span className="text-red-500">*</span></FormLabel>
                            <Popover open={dateRendezVousOpen} onOpenChange={setDateRendezVousOpen}>
                              <PopoverTrigger asChild>
                                <FormControl>
                                  <Button
                                    variant="outline"
                                    className={`w-full bg-white border-gray-200 text-left font-normal ${!field.value ? "text-gray-400" : "text-gray-900"}`}
                                    disabled={client && !editMode}
                                  >
                                    {field.value ? (
                                      format(field.value, "dd/MM/yyyy", { locale: fr })
                                    ) : (
                                      <span>Sélectionner une date</span>
                                    )}
                                    <Calendar className="ml-auto h-4 w-4 opacity-50" />
                                  </Button>
                                </FormControl>
                              </PopoverTrigger>
                              <PopoverContent className="w-auto p-0" align="start">
                                <CalendarComponent
                                  mode="single"
                                  selected={field.value}
                                  onSelect={(date) => {
                                    field.onChange(date);
                                    setDateRendezVousOpen(false);
                                  }}
                                  disabled={client && !editMode}
                                  initialFocus
                                  locale={fr}
                                />
                              </PopoverContent>
                            </Popover>
                            <FormMessage />
                          </FormItem>
                        )}
                      />
                    )}

                    {form.watch("status") === "installation" && (
                      <FormField
                        control={form.control}
                        name="dateInstallation"
                        render={({ field }) => (
                          <FormItem className="flex flex-col">
                            <FormLabel className="text-gray-700">Date d'installation <span className="text-red-500">*</span></FormLabel>
                            <Popover open={dateInstallationOpen} onOpenChange={setDateInstallationOpen}>
                              <PopoverTrigger asChild>
                                <FormControl>
                                  <Button
                                    variant="outline"
                                    className={`w-full bg-white border-gray-200 text-left font-normal ${!field.value ? "text-gray-400" : "text-gray-900"}`}
                                    disabled={client && !editMode}
                                  >
                                    {field.value ? (
                                      format(field.value, "dd/MM/yyyy", { locale: fr })
                                    ) : (
                                      <span>Sélectionner une date</span>
                                    )}
                                    <Calendar className="ml-auto h-4 w-4 opacity-50" />
                                  </Button>
                                </FormControl>
                              </PopoverTrigger>
                              <PopoverContent className="w-auto p-0" align="start">
                                <CalendarComponent
                                  mode="single"
                                  selected={field.value}
                                  onSelect={(date) => {
                                    field.onChange(date);
                                    setDateInstallationOpen(false);
                                  }}
                                  disabled={client && !editMode}
                                  initialFocus
                                  locale={fr}
                                />
                              </PopoverContent>
                            </Popover>
                            <FormMessage />
                          </FormItem>
                        )}
                      />
                    )}

                    <FormField
                      control={form.control}
                      name="commentaire"
                      render={({ field }) => (
                        <FormItem className="col-span-2">
                          <FormLabel className="text-gray-700">
                            Commentaire 
                            <span className="text-xs text-gray-500 font-normal ml-2">(va automatiquement créer une tâche)</span>
                          </FormLabel>
                          {client && !editMode ? (
                            <div className="p-2 border rounded bg-gray-50 min-h-[80px]">
                              {field.value || "Aucun commentaire"}
                            </div>
                          ) : (
                            <FormControl>
                              <Textarea 
                                placeholder="Notes et commentaires sur ce client..." 
                                className="bg-white border-gray-200 min-h-[80px] resize-y"
                                {...field}
                                disabled={client && !editMode}
                              />
                            </FormControl>
                          )}
                          <FormMessage />
                        </FormItem>
                      )}
                    />
                  </div>
                  
                  <div className="flex justify-between pt-4">
                    <Button
                      type="button"
                      variant="outline"
                      onClick={() => handleTabChange("adresse")}
                      className="text-gray-600 hover:bg-gray-100"
                    >
                      <ChevronLeft className="h-4 w-4 mr-1" />
                      Précédent
                    </Button>
                    <Button
                      type="button"
                      onClick={() => handleTabChange("source")}
                      className="bg-blue-600 hover:bg-blue-700 text-white"
                      disabled={isPending}
                    >
                      Suivant
                    </Button>
                  </div>
                </TabsContent>



                <TabsContent value="source" className="bg-white p-4 rounded-md space-y-4">
                  <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                    <FormField
                      control={form.control}
                      name="source"
                      render={({ field }) => (
                        <FormItem>
                          <FormLabel className="text-gray-700">Source du client <span className="text-red-500">*</span></FormLabel>
                          <Select
                            onValueChange={(value) => {
                              field.onChange(value);
                              if (value !== "Recommandation") {
                                form.setValue("typeRecommandation", "");
                                form.setValue("civiliteProspect", "");
                                form.setValue("prenomProspect", "");
                                form.setValue("nomProspect", "");
                                form.setValue("mobileProspect", "");
                                form.setValue("codePostalProspect", "");
                                form.setValue("villeProspect", "");
                              }
                            }}
                            defaultValue={field.value}
                            disabled={client && !editMode}
                          >
                            <FormControl>
                              <SelectTrigger className="bg-white border-gray-200">
                                <SelectValue placeholder="Sélectionner une source" />
                              </SelectTrigger>
                            </FormControl>
                            <SelectContent>
                              {sourceOptions.map((option) => (
                                <SelectItem key={option.value} value={option.value}>
                                  {option.label}
                                </SelectItem>
                              ))}
                            </SelectContent>
                          </Select>
                          <FormMessage />
                        </FormItem>
                      )}
                    />

                    {form.watch("source") === "Recommandation" && (
                      <FormField
                        control={form.control}
                        name="typeRecommandation"
                        render={({ field }) => (
                          <FormItem>
                            <FormLabel className="text-gray-700">Type de recommandation <span className="text-red-500">*</span></FormLabel>
                            <Select
                              onValueChange={field.onChange}
                              defaultValue={field.value}
                              disabled={client && !editMode}
                            >
                              <FormControl>
                                <SelectTrigger className="bg-white border-gray-200">
                                  <SelectValue placeholder="Sélectionner un type" />
                                </SelectTrigger>
                              </FormControl>
                              <SelectContent>
                                {typeRecommandationOptions.map((option) => (
                                  <SelectItem key={option.value} value={option.value}>
                                    {option.label}
                                  </SelectItem>
                                ))}
                              </SelectContent>
                            </Select>
                            <FormMessage />
                          </FormItem>
                        )}
                      />
                    )}

                    {form.watch("source") === "Recommandation" && form.watch("typeRecommandation") === "Prospect" && (
                      <>
                        <FormField
                          control={form.control}
                          name="civiliteProspect"
                          render={({ field }) => (
                            <FormItem>
                              <FormLabel className="text-gray-700">Civilité du prospect <span className="text-red-500">*</span></FormLabel>
                              <Select
                                onValueChange={field.onChange}
                                defaultValue={field.value}
                                disabled={client && !editMode}
                              >
                                <FormControl>
                                  <SelectTrigger className="bg-white border-gray-200">
                                    <SelectValue placeholder="Sélectionner une civilité" />
                                  </SelectTrigger>
                                </FormControl>
                                <SelectContent>
                                  {civiliteOptions.map((option) => (
                                    <SelectItem key={option.value} value={option.value}>
                                      {option.label}
                                    </SelectItem>
                                  ))}
                                </SelectContent>
                              </Select>
                              <FormMessage />
                            </FormItem>
                          )}
                        />

                        <FormField
                          control={form.control}
                          name="prenomProspect"
                          render={({ field }) => (
                            <FormItem>
                              <FormLabel className="text-gray-700">Prénom du prospect <span className="text-red-500">*</span></FormLabel>
                              {client && !editMode ? (
                                <div className="p-2 border rounded bg-gray-50">
                                  {field.value || "Non spécifié"}
                                </div>
                              ) : (
                                <FormControl>
                                  <Input placeholder="Prénom" className="bg-white border-gray-200" {...field} disabled={client && !editMode} />
                                </FormControl>
                              )}
                              <FormMessage />
                            </FormItem>
                          )}
                        />

                        <FormField
                          control={form.control}
                          name="nomProspect"
                          render={({ field }) => (
                            <FormItem>
                              <FormLabel className="text-gray-700">Nom du prospect <span className="text-red-500">*</span></FormLabel>
                              {client && !editMode ? (
                                <div className="p-2 border rounded bg-gray-50">
                                  {field.value || "Non spécifié"}
                                </div>
                              ) : (
                                <FormControl>
                                  <Input placeholder="Nom" className="bg-white border-gray-200" {...field} disabled={client && !editMode} />
                                </FormControl>
                              )}
                              <FormMessage />
                            </FormItem>
                          )}
                        />

                        <FormField
                          control={form.control}
                          name="mobileProspect"
                          render={({ field }) => (
                            <FormItem>
                              <FormLabel className="text-gray-700">Mobile du prospect <span className="text-red-500">*</span></FormLabel>
                              {client && !editMode ? (
                                <div className="p-2 border rounded bg-gray-50">
                                  {field.value || "Non spécifié"}
                                </div>
                              ) : (
                                <FormControl>
                                  <Input placeholder="Mobile" className="bg-white border-gray-200" {...field} disabled={client && !editMode} />
                                </FormControl>
                              )}
                              <FormMessage />
                            </FormItem>
                          )}
                        />

                        <FormField
                          control={form.control}
                          name="codePostalProspect"
                          render={({ field }) => (
                            <FormItem>
                              <FormLabel className="text-gray-700">Code postal du prospect <span className="text-red-500">*</span></FormLabel>
                              {client && !editMode ? (
                                <div className="p-2 border rounded bg-gray-50">
                                  {field.value || "Non spécifié"}
                                </div>
                              ) : (
                                <FormControl>
                                  <CommuneInput 
                                    value={field.value || ""} 
                                    onChange={(value) => {
                                      field.onChange(value);
                                      // Récupérer les communes correspondantes
                                      if (value && value.length === 5) {
                                        getCommunesByCodePostal(value)
                                          .then(communes => {
                                            if (communes.length === 1) {
                                              // S'il n'y a qu'une seule commune, la sélectionner automatiquement
                                              form.setValue("villeProspect", communes[0].nom);
                                            }
                                          })
                                          .catch(err => console.error(err));
                                      }
                                    }}
                                    className="bg-white border-gray-200" 
                                    disabled={client && !editMode} 
                                  />
                                </FormControl>
                              )}
                              <FormMessage />
                            </FormItem>
                          )}
                        />

                        <FormField
                          control={form.control}
                          name="villeProspect"
                          render={({ field }) => (
                            <FormItem>
                              <FormLabel className="text-gray-700">Ville du prospect <span className="text-red-500">*</span></FormLabel>
                              {client && !editMode ? (
                                <div className="p-2 border rounded bg-gray-50">
                                  {field.value || "Non spécifié"}
                                </div>
                              ) : (
                                <FormControl>
                                  <Input placeholder="Ville" className="bg-white border-gray-200" {...field} disabled={client && !editMode} />
                                </FormControl>
                              )}
                              <FormMessage />
                            </FormItem>
                          )}
                        />
                      </>
                    )}
                  </div>
                  
                  <div className="flex justify-between pt-4">
                    <Button
                      type="button"
                      variant="outline"
                      onClick={() => handleTabChange("contrat")}
                      className="text-gray-600 hover:bg-gray-100"
                    >
                      <ChevronLeft className="h-4 w-4 mr-1" />
                      Précédent
                    </Button>
                    <Button
                      type="submit"
                      className="bg-blue-600 hover:bg-blue-700 text-white"
                      disabled={isPending || (client && !editMode)}
                    >
                      {isPending && <Loader2 className="mr-2 h-4 w-4 animate-spin" />}
                      {client ? "Mettre à jour" : "Créer"} le client
                    </Button>
                  </div>
                </TabsContent>
              </Tabs>
            </form>
          </Form>
        )}
      </DialogContent>
    </Dialog>
  );
}