import React, { useState } from 'react';
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { Button } from "@/components/ui/button";
import { Badge } from "@/components/ui/badge";
import { Alert, AlertDescription } from "@/components/ui/alert";
import { Textarea } from "@/components/ui/textarea";
import { Input } from "@/components/ui/input";
import { Label } from "@/components/ui/label";
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "@/components/ui/select";
import { 
  Bot, 
  Play, 
  CheckCircle,
  AlertTriangle,
  Clock,
  Phone,
  Users
} from "lucide-react";

const TaskAutomationDemo: React.FC = () => {
  const [testComment, setTestComment] = useState("Rappeller pour la maison de l'Aude");
  const [clientId, setClientId] = useState("81");
  const [statusChange, setStatusChange] = useState("");
  const [isRunning, setIsRunning] = useState(false);
  const [results, setResults] = useState<any>(null);

  // Analyse du commentaire pour prévisualisation
  const analyzeComment = (comment: string) => {
    const callKeywords = ['appeler', 'rappeler', 'rappeller', 'recontacter', 'téléphoner', 'joindre'];
    const lowerComment = comment.toLowerCase();
    const isCall = callKeywords.some(keyword => lowerComment.includes(keyword));
    
    // Extraction de dates
    const datePatterns = [
      /(\d{1,2})\/(\d{1,2})\/(\d{4})/g,
      /(\d{1,2})-(\d{1,2})-(\d{4})/g,
      /(\d{1,2})\.(\d{1,2})\.(\d{4})/g
    ];
    
    let foundDates: string[] = [];
    datePatterns.forEach(pattern => {
      const matches = Array.from(comment.matchAll(pattern));
      foundDates.push(...matches.map(match => match[0]));
    });

    return {
      isCall,
      category: isCall ? 'appel' : 'suivi',
      priority: 'moyenne',
      title: isCall ? `Appeler Roland Salvat` : `Suivi du contrat Roland Salvat`,
      hasDate: foundDates.length > 0,
      dates: foundDates,
      detectedKeywords: callKeywords.filter(keyword => lowerComment.includes(keyword))
    };
  };

  const preview = analyzeComment(testComment);

  const runAutomationTest = async () => {
    setIsRunning(true);
    try {
      // Simulation du test d'automatisation
      await new Promise(resolve => setTimeout(resolve, 2000));
      
      setResults({
        success: true,
        tasksCreated: 1,
        taskDetails: {
          id: Math.floor(Math.random() * 1000),
          title: preview.title,
          description: testComment,
          category: preview.category,
          priority: preview.priority,
          dueDate: preview.hasDate ? preview.dates[0] : "Dans 2 jours",
          clientName: "Roland Salvat",
          isAutoGenerated: true,
          triggerEvent: statusChange ? 'status_change' : 'comment_analysis'
        }
      });
    } catch (error) {
      setResults({
        success: false,
        error: "Erreur lors du test d'automatisation"
      });
    }
    setIsRunning(false);
  };

  return (
    <div className="space-y-6">
      {/* En-tête */}
      <div className="flex items-center space-x-3 mb-6">
        <div className="p-2 bg-blue-100 rounded-lg">
          <Bot className="h-6 w-6 text-blue-600" />
        </div>
        <div>
          <h2 className="text-xl font-bold text-gray-900">Test d'automatisation</h2>
          <p className="text-gray-500">Démonstration du système de création automatique de tâches</p>
        </div>
      </div>

      {/* Cas d'exemple actuel */}
      <Alert>
        <Phone className="h-4 w-4" />
        <AlertDescription>
          <strong>Cas détecté:</strong> Le commentaire "Rappeller pour la maison de l'Aude" du client Roland Salvat 
          contient le mot-clé "Rappeller" qui devrait automatiquement générer une tâche de type "appel".
        </AlertDescription>
      </Alert>

      <div className="grid md:grid-cols-2 gap-6">
        {/* Configuration du test */}
        <Card>
          <CardHeader>
            <CardTitle>Configuration du test</CardTitle>
          </CardHeader>
          <CardContent className="space-y-4">
            <div>
              <Label htmlFor="clientId">ID Client</Label>
              <Input
                id="clientId"
                value={clientId}
                onChange={(e) => setClientId(e.target.value)}
                placeholder="81"
              />
            </div>

            <div>
              <Label htmlFor="comment">Commentaire à analyser</Label>
              <Textarea
                id="comment"
                value={testComment}
                onChange={(e) => setTestComment(e.target.value)}
                placeholder="Saisissez le commentaire..."
                className="min-h-20"
              />
            </div>

            <div>
              <Label htmlFor="status">Test changement de statut (optionnel)</Label>
              <Select value={statusChange} onValueChange={setStatusChange}>
                <SelectTrigger>
                  <SelectValue placeholder="Aucun changement" />
                </SelectTrigger>
                <SelectContent>
                  <SelectItem value="none">Aucun changement</SelectItem>
                  <SelectItem value="post_production">Vers Post-production</SelectItem>
                </SelectContent>
              </Select>
            </div>

            <Button 
              onClick={runAutomationTest} 
              disabled={isRunning || !testComment.trim()}
              className="w-full"
            >
              {isRunning ? (
                <>
                  <Clock className="h-4 w-4 mr-2 animate-spin" />
                  Test en cours...
                </>
              ) : (
                <>
                  <Play className="h-4 w-4 mr-2" />
                  Lancer le test
                </>
              )}
            </Button>
          </CardContent>
        </Card>

        {/* Prévisualisation */}
        <Card>
          <CardHeader>
            <CardTitle>Prévisualisation de l'analyse</CardTitle>
          </CardHeader>
          <CardContent className="space-y-4">
            <div className="flex items-center justify-between">
              <span className="text-sm font-medium">Type de tâche:</span>
              <Badge className={preview.isCall ? 'bg-blue-100 text-blue-800' : 'bg-gray-100 text-gray-800'}>
                {preview.category}
              </Badge>
            </div>

            <div className="flex items-center justify-between">
              <span className="text-sm font-medium">Titre généré:</span>
              <span className="text-sm text-gray-600 text-right">{preview.title}</span>
            </div>

            <div className="flex items-center justify-between">
              <span className="text-sm font-medium">Priorité:</span>
              <Badge variant="outline">{preview.priority}</Badge>
            </div>

            {preview.detectedKeywords.length > 0 && (
              <div>
                <span className="text-sm font-medium">Mots-clés détectés:</span>
                <div className="flex flex-wrap gap-1 mt-1">
                  {preview.detectedKeywords.map((keyword, index) => (
                    <Badge key={index} variant="secondary" className="text-xs">
                      {keyword}
                    </Badge>
                  ))}
                </div>
              </div>
            )}

            {preview.hasDate && (
              <div>
                <span className="text-sm font-medium">Dates trouvées:</span>
                <div className="flex flex-wrap gap-1 mt-1">
                  {preview.dates.map((date, index) => (
                    <Badge key={index} variant="outline" className="text-xs">
                      {date}
                    </Badge>
                  ))}
                </div>
              </div>
            )}

            {statusChange === "post_production" && (
              <Alert>
                <AlertTriangle className="h-4 w-4" />
                <AlertDescription>
                  Changement vers Post-production détecté. Une tâche priorité élevée sera créée automatiquement.
                </AlertDescription>
              </Alert>
            )}
          </CardContent>
        </Card>
      </div>

      {/* Résultats */}
      {results && (
        <Card>
          <CardHeader>
            <CardTitle className="flex items-center space-x-2">
              {results.success ? (
                <CheckCircle className="h-5 w-5 text-green-600" />
              ) : (
                <AlertTriangle className="h-5 w-5 text-red-600" />
              )}
              <span>Résultats du test</span>
            </CardTitle>
          </CardHeader>
          <CardContent>
            {results.success ? (
              <div className="space-y-4">
                <Alert>
                  <CheckCircle className="h-4 w-4" />
                  <AlertDescription>
                    <strong>Succès!</strong> {results.tasksCreated} tâche(s) créée(s) automatiquement.
                  </AlertDescription>
                </Alert>

                <div className="bg-gray-50 p-4 rounded-lg space-y-2">
                  <h4 className="font-medium">Détails de la tâche créée:</h4>
                  <div className="grid grid-cols-2 gap-2 text-sm">
                    <div><strong>ID:</strong> #{results.taskDetails.id}</div>
                    <div><strong>Catégorie:</strong> {results.taskDetails.category}</div>
                    <div><strong>Titre:</strong> {results.taskDetails.title}</div>
                    <div><strong>Priorité:</strong> {results.taskDetails.priority}</div>
                    <div><strong>Client:</strong> {results.taskDetails.clientName}</div>
                    <div><strong>Échéance:</strong> {results.taskDetails.dueDate}</div>
                  </div>
                  <div className="pt-2">
                    <strong>Description:</strong> {results.taskDetails.description}
                  </div>
                  <div className="flex space-x-2 pt-2">
                    <Badge variant="secondary">Auto-générée</Badge>
                    <Badge variant="outline">{results.taskDetails.triggerEvent}</Badge>
                  </div>
                </div>
              </div>
            ) : (
              <Alert>
                <AlertTriangle className="h-4 w-4" />
                <AlertDescription>
                  <strong>Erreur:</strong> {results.error}
                </AlertDescription>
              </Alert>
            )}
          </CardContent>
        </Card>
      )}
    </div>
  );
};

export default TaskAutomationDemo;