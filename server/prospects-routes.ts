import type { Express } from "express";
import { db } from "@db";
import { prospects, users, tasks } from "@shared/schema";
import { eq, and, or, like, desc, isNull, isNotNull } from "drizzle-orm";
import { prospectsInsertSchema } from "@shared/schema";
// Fonction d'authentification locale (copi√©e depuis routes.ts)
async function requireAuth(req: any, res: any, next: any) {
  try {
    const userId = req.session?.userId;
    
    if (!userId) {
      if (req.session && req.session.id) {
        req.session.destroy(() => {});
      }
      return res.status(401).json({ message: "Non authentifie" });
    }

    const user = await db.query.users.findFirst({
      where: eq(users.id, userId),
      columns: {
        id: true,
        username: true,
        email: true,
        prenom: true,
        nom: true,
        isAdmin: true,
        codeVendeur: true,
      }
    });

    if (!user) {
      return res.status(401).json({ message: "Utilisateur non trouve" });
    }

    req.user = {
      id: user.id,
      username: user.username,
      email: user.email || "",
      prenom: user.prenom || "",
      nom: user.nom || "",
      isAdmin: user.isAdmin || false,
      codeVendeur: user.codeVendeur || undefined,
    };

    next();
  } catch (error) {
    console.error("Erreur d'authentification:", error);
    res.status(500).json({ message: "Erreur serveur" });
  }
}

// Fonction utilitaire pour cr√©er automatiquement une t√¢che √† partir d'un commentaire de prospect
async function createTaskFromProspectComment(prospect: any) {
  try {
    const commentaire = prospect.commentaire?.toLowerCase() || "";
    
    // D√©terminer le type de t√¢che selon les mots-cl√©s
    let category = "suivi";
    let priority = "medium";
    let title = `Suivi prospect: ${prospect.prenom} ${prospect.nom}`;
    
    if (commentaire.includes("appel") || commentaire.includes("rappel") || commentaire.includes("tel")) {
      category = "appel";
      title = `Appeler: ${prospect.prenom} ${prospect.nom}`;
      priority = "high";
    } else if (commentaire.includes("email") || commentaire.includes("mail")) {
      category = "email";
      title = `Email √†: ${prospect.prenom} ${prospect.nom}`;
    } else if (commentaire.includes("rendez-vous") || commentaire.includes("rdv")) {
      category = "rencontre";
      title = `RDV avec: ${prospect.prenom} ${prospect.nom}`;
      priority = "high";
    }

    // Utiliser la date de prochain contact comme √©ch√©ance (obligatoire)
    if (!prospect.prochainContact) {
      console.log(`‚ö†Ô∏è Pas de date de prochain contact pour ${prospect.prenom} ${prospect.nom} - t√¢che non cr√©√©e`);
      return;
    }

    const dueDate = new Date(prospect.prochainContact);
    
    // V√©rifier que la date est dans le futur
    if (dueDate <= new Date()) {
      console.log(`‚ö†Ô∏è Date de prochain contact dans le pass√© pour ${prospect.prenom} ${prospect.nom} - t√¢che non cr√©√©e`);
      return;
    }

    // Cr√©er la t√¢che
    await db.insert(tasks).values([{
      title,
      commentaire: prospect.commentaire,
      status: "pending",
      priority,
      category,
      userId: prospect.userId,
      dueDate,
      createdAt: new Date(),
    }]);

    console.log(`‚úÖ T√¢che automatique cr√©√©e pour prospect ${prospect.prenom} ${prospect.nom} (${category})`);
  } catch (error) {
    console.error("‚ùå Erreur lors de la cr√©ation automatique de t√¢che:", error);
  }
}

export function setupProspectsRoutes(app: Express) {
  // GET /api/prospects - R√©cup√©rer la liste des prospects avec filtres
  app.get("/api/prospects", requireAuth, async (req, res) => {
    try {
      const { type, search, stade, userId } = req.query;
      
      console.log("üîí S√âCURIT√â PROSPECTS - User connect√©:", {
        id: (req as any).user?.id,
        codeVendeur: (req as any).user?.codeVendeur,
        isAdmin: (req as any).user?.isAdmin
      });
      
      // S√âCURIT√â CRITIQUE : Construire les conditions where avec isolation par vendeur
      const whereConditions = [isNull(prospects.deletedAt)];
      
      // ISOLATION S√âCURIS√âE : Seuls les admins voient tous les prospects, les autres voient uniquement les leurs
      if (!(req as any).user?.isAdmin) {
        whereConditions.push(eq(prospects.userId, (req as any).user.id));
      }
      
      if (type) {
        whereConditions.push(eq(prospects.type, type as string));
      }
      
      if (stade) {
        whereConditions.push(eq(prospects.stade, stade as string));
      }
      
      // Pour les admins uniquement : permettre le filtre par userId sp√©cifique
      if (userId && (req as any).user?.isAdmin) {
        whereConditions.push(eq(prospects.userId, parseInt(userId as string)));
      }
      
      if (search) {
        const searchTerm = `%${search}%`;
        const searchConditions = or(
          like(prospects.prenom, searchTerm),
          like(prospects.nom, searchTerm),
          like(prospects.email, searchTerm),
          like(prospects.telephone, searchTerm),
          like(prospects.ville, searchTerm)
        );
        if (searchConditions) {
          whereConditions.push(searchConditions);
        }
      }

      // Ex√©cuter la requ√™te
      const result = await db.select()
        .from(prospects)
        .where(and(...whereConditions))
        .orderBy(desc(prospects.createdAt));

      // Calculer les statistiques
      const stats = {
        total: result.length,
        nouveau: result.filter(p => p.stade === "nouveau").length,
        contacte: result.filter(p => p.stade === "contacte").length,
        qualifie: result.filter(p => p.stade === "qualifie").length,
        pret_signature: result.filter(p => p.stade === "pret_signature").length,
        converti: result.filter(p => p.stade === "converti").length,
      };

      res.json({ prospects: result, stats });
    } catch (error) {
      console.error("Erreur lors de la r√©cup√©ration des prospects:", error);
      res.status(500).json({ error: "Erreur serveur" });
    }
  });

  // GET /api/prospects/:id - R√©cup√©rer un prospect sp√©cifique
  app.get("/api/prospects/:id", requireAuth, async (req, res) => {
    try {
      const prospectId = parseInt(req.params.id);
      
      console.log("üîí S√âCURIT√â PROSPECT ID - User connect√©:", {
        id: (req as any).user?.id,
        prospectId: prospectId,
        isAdmin: (req as any).user?.isAdmin
      });
      
      // S√âCURIT√â CRITIQUE : Construire la requ√™te avec isolation par vendeur
      const whereConditions = [
        eq(prospects.id, prospectId), 
        isNull(prospects.deletedAt)
      ];
      
      // ISOLATION S√âCURIS√âE : Seuls les admins voient tous les prospects, les autres voient uniquement les leurs
      if (!(req as any).user?.isAdmin) {
        whereConditions.push(eq(prospects.userId, (req as any).user.id));
      }
      
      const result = await db.select()
        .from(prospects)
        .where(and(...whereConditions))
        .limit(1);

      if (result.length === 0) {
        return res.status(404).json({ error: "Prospect non trouv√© ou acc√®s refus√©" });
      }

      res.json(result[0]);
    } catch (error) {
      console.error("Erreur lors de la r√©cup√©ration du prospect:", error);
      res.status(500).json({ error: "Erreur serveur" });
    }
  });

  // POST /api/prospects - Cr√©er un nouveau prospect
  app.post("/api/prospects", requireAuth, async (req, res) => {
    try {
      // S√âCURIT√â CRITIQUE : Forcer l'assignation √† l'utilisateur connect√©
      const currentUserId = (req as any).user?.id;
      
      console.log("üîí CR√âATION PROSPECT S√âCURIS√âE - User connect√©:", {
        id: currentUserId,
        codeVendeur: (req as any).user?.codeVendeur,
        isAdmin: (req as any).user?.isAdmin
      });
      
      // Pr√©parer les donn√©es avec valeurs par d√©faut et assurer que userId est d√©fini
      const prospectData = {
        ...req.body,
        userId: currentUserId, // Toujours d√©fini gr√¢ce au fallback
        stade: req.body.stade || "nouveau",
        nombreContacts: req.body.nombreContacts || 1,
        dernierContact: req.body.dernierContact ? new Date(req.body.dernierContact) : new Date(),
        prochainContact: req.body.prochainContact ? new Date(req.body.prochainContact) : null,
        commentaire: req.body.commentaire || "",
        // G√©rer l'email : vide ou null = null
        email: (req.body.email && req.body.email.trim() !== "") ? req.body.email : null,
        // S'assurer que type est d√©fini
        type: req.body.type || "client",
      };

      // S'assurer que economyData n'est enregistr√© que pour les prospects clients
      if (prospectData.type !== "client") {
        prospectData.economyData = null;
      }

      // Valider les donn√©es avec le sch√©ma
      const validatedData = prospectsInsertSchema.parse(prospectData);

      // Transformer historiqueContacts en array correct si n√©cessaire
      const insertData = {
        ...validatedData,
        historiqueContacts: validatedData.historiqueContacts ? 
          Array.isArray(validatedData.historiqueContacts) ? 
            validatedData.historiqueContacts : [] 
          : []
      };

      const result = await db.insert(prospects).values([insertData]).returning();
      
      // Cr√©er automatiquement une t√¢che si le prospect a un commentaire ET une date de prochain contact
      if (result[0] && result[0].commentaire && result[0].commentaire.trim().length > 0 && result[0].prochainContact) {
        await createTaskFromProspectComment(result[0]);
      }
      
      res.status(201).json(result[0]);
    } catch (error: any) {
      if (error.name === 'ZodError') {
        console.error("Erreur de validation prospect:", error.errors);
        return res.status(400).json({ 
          error: "Donn√©es invalides", 
          details: error.errors 
        });
      }
      console.error("Erreur lors de la cr√©ation du prospect:", error);
      res.status(500).json({ error: "Erreur serveur" });
    }
  });

  // PUT /api/prospects/:id - Mettre √† jour un prospect
  app.put("/api/prospects/:id", requireAuth, async (req, res) => {
    try {
      const prospectId = parseInt(req.params.id);
      
      console.log("üîí MODIFICATION PROSPECT S√âCURIS√âE - User connect√©:", {
        id: (req as any).user?.id,
        prospectId: prospectId,
        isAdmin: (req as any).user?.isAdmin
      });
      
      // S√âCURIT√â CRITIQUE : Construire la requ√™te avec isolation par vendeur
      const whereConditions = [
        eq(prospects.id, prospectId), 
        isNull(prospects.deletedAt)
      ];
      
      // ISOLATION S√âCURIS√âE : Seuls les admins modifient tous les prospects, les autres modifient uniquement les leurs
      if (!(req as any).user?.isAdmin) {
        whereConditions.push(eq(prospects.userId, (req as any).user.id));
      }
      
      // V√©rifier que le prospect existe ET appartient au vendeur connect√©
      const existingProspect = await db.select()
        .from(prospects)
        .where(and(...whereConditions))
        .limit(1);

      if (existingProspect.length === 0) {
        return res.status(404).json({ error: "Prospect non trouv√© ou acc√®s refus√©" });
      }

      // Valider les donn√©es partielles
      const updateData = { ...req.body };
      
      // S'assurer que economyData n'est enregistr√© que pour les prospects clients
      if (updateData.type && updateData.type !== "client") {
        updateData.economyData = null;
      }

      // Corriger le formatage des dates
      if (updateData.prochainContact && typeof updateData.prochainContact === 'string') {
        updateData.prochainContact = new Date(updateData.prochainContact);
      }
      if (updateData.dernierContact && typeof updateData.dernierContact === 'string') {
        updateData.dernierContact = new Date(updateData.dernierContact);
      }

      // Ajouter la date de mise √† jour
      updateData.updatedAt = new Date();

      const result = await db.update(prospects)
        .set(updateData)
        .where(eq(prospects.id, prospectId))
        .returning();

      res.json(result[0]);
    } catch (error) {
      console.error("Erreur lors de la mise √† jour du prospect:", error);
      res.status(500).json({ error: "Erreur serveur" });
    }
  });

  // DELETE /api/prospects/:id - Supprimer un prospect (soft delete)
  app.delete("/api/prospects/:id", requireAuth, async (req, res) => {
    try {
      const prospectId = parseInt(req.params.id);
      
      console.log("üîí SUPPRESSION PROSPECT S√âCURIS√âE - User connect√©:", {
        id: (req as any).user?.id,
        prospectId: prospectId,
        isAdmin: (req as any).user?.isAdmin
      });
      
      // S√âCURIT√â CRITIQUE : Construire la requ√™te avec isolation par vendeur
      const whereConditions = [eq(prospects.id, prospectId)];
      
      // ISOLATION S√âCURIS√âE : Seuls les admins suppriment tous les prospects, les autres suppriment uniquement les leurs
      if (!(req as any).user?.isAdmin) {
        whereConditions.push(eq(prospects.userId, (req as any).user.id));
      }
      
      // Soft delete avec v√©rification d'appartenance
      const result = await db.update(prospects)
        .set({ deletedAt: new Date() })
        .where(and(...whereConditions))
        .returning();

      if (result.length === 0) {
        return res.status(404).json({ error: "Prospect non trouv√© ou acc√®s refus√©" });
      }

      res.json({ message: "Prospect supprim√© avec succ√®s" });
    } catch (error) {
      console.error("Erreur lors de la suppression du prospect:", error);
      res.status(500).json({ error: "Erreur serveur" });
    }
  });

  // GET /api/prospects/trash - R√©cup√©rer les prospects supprim√©s (corbeille)
  app.get("/api/prospects/trash", requireAuth, async (req, res) => {
    try {
      const { userId } = req.query;
      
      console.log("üîí CORBEILLE PROSPECTS S√âCURIS√âE - User connect√©:", {
        id: (req as any).user?.id,
        isAdmin: (req as any).user?.isAdmin
      });
      
      const whereConditions = [
        // Seulement les prospects supprim√©s (deletedAt non null)
        isNotNull(prospects.deletedAt)
      ];
      
      // ISOLATION S√âCURIS√âE : Seuls les admins voient tous les prospects supprim√©s, les autres voient uniquement les leurs
      if (!(req as any).user?.isAdmin) {
        whereConditions.push(eq(prospects.userId, (req as any).user.id));
      } else if (userId) {
        // Pour les admins uniquement : permettre le filtre par userId sp√©cifique
        whereConditions.push(eq(prospects.userId, parseInt(userId as string)));
      }
      
      const deletedProspects = await db.select()
        .from(prospects)
        .where(and(...whereConditions))
        .orderBy(desc(prospects.deletedAt));
      
      res.json(deletedProspects);
    } catch (error) {
      console.error("Erreur lors de la r√©cup√©ration de la corbeille:", error);
      res.status(500).json({ error: "Erreur serveur" });
    }
  });

  // POST /api/prospects/:id/restore - Restaurer un prospect depuis la corbeille
  app.post("/api/prospects/:id/restore", requireAuth, async (req, res) => {
    try {
      const prospectId = parseInt(req.params.id);
      
      // V√©rifier que le prospect existe et est supprim√©
      const existingProspect = await db.select()
        .from(prospects)
        .where(eq(prospects.id, prospectId))
        .limit(1);
      
      if (existingProspect.length === 0 || !existingProspect[0].deletedAt) {
        return res.status(404).json({ error: "Prospect non trouv√© dans la corbeille" });
      }
      
      // Restaurer (remettre deletedAt √† null)
      const result = await db.update(prospects)
        .set({ deletedAt: null })
        .where(eq(prospects.id, prospectId))
        .returning();

      res.json({ message: "Prospect restaur√© avec succ√®s", prospect: result[0] });
    } catch (error) {
      console.error("Erreur lors de la restauration du prospect:", error);
      res.status(500).json({ error: "Erreur serveur" });
    }
  });

  // DELETE /api/prospects/:id/permanent - Suppression d√©finitive d'un prospect
  app.delete("/api/prospects/:id/permanent", requireAuth, async (req, res) => {
    try {
      const prospectId = parseInt(req.params.id);
      
      // V√©rifier que le prospect existe et est supprim√©
      const existingProspect = await db.select()
        .from(prospects)
        .where(eq(prospects.id, prospectId))
        .limit(1);
      
      if (existingProspect.length === 0 || !existingProspect[0].deletedAt) {
        return res.status(404).json({ error: "Prospect non trouv√© dans la corbeille" });
      }
      
      // Suppression d√©finitive de la base de donn√©es
      await db.delete(prospects)
        .where(eq(prospects.id, prospectId));

      res.json({ message: "Prospect supprim√© d√©finitivement" });
    } catch (error) {
      console.error("Erreur lors de la suppression d√©finitive:", error);
      res.status(500).json({ error: "Erreur serveur" });
    }
  });

  // POST /api/prospects/:id/contact - Ajouter un contact √† l'historique
  app.post("/api/prospects/:id/contact", requireAuth, async (req, res) => {
    try {
      const prospectId = parseInt(req.params.id);
      const { type, notes, resultat, prochainContact, objectif, actionsAPrev } = req.body;

      // R√©cup√©rer le prospect actuel
      const existingProspect = await db.select()
        .from(prospects)
        .where(and(eq(prospects.id, prospectId), isNull(prospects.deletedAt)))
        .limit(1);

      if (existingProspect.length === 0) {
        return res.status(404).json({ error: "Prospect non trouv√©" });
      }

      const prospect = existingProspect[0];
      
      // Cr√©er le nouveau contact avec structure conforme au sch√©ma
      const nouveauContact = {
        date: new Date().toISOString(),
        type: (type || "appel") as "appel" | "email" | "sms" | "rencontre",
        commentaire: notes || "",
        resultat: (resultat || "neutre") as "positif" | "neutre" | "negatif",
      };

      // Mettre √† jour l'historique
      const historiqueActuel = Array.isArray(prospect.historiqueContacts) ? prospect.historiqueContacts : [];
      const nouvelHistorique = [...historiqueActuel, nouveauContact];

      // D√©terminer le nouveau stade bas√© sur le r√©sultat
      let nouveauStade = prospect.stade;
      if (resultat === "positif" && prospect.stade === "nouveau") {
        nouveauStade = "contacte";
      } else if (resultat === "positif" && prospect.stade === "contacte") {
        nouveauStade = "qualifie";
      }

      // Mettre √† jour le prospect
      const result = await db.update(prospects)
        .set({
          historiqueContacts: nouvelHistorique,
          nombreContacts: (prospect.nombreContacts || 0) + 1,
          dernierContact: new Date(),
          prochainContact: prochainContact ? new Date(prochainContact) : prospect.prochainContact,
          stade: nouveauStade,
          updatedAt: new Date(),
        })
        .where(eq(prospects.id, prospectId))
        .returning();

      // Cr√©er automatiquement une t√¢che pour le nouveau contact si une date de prochain contact est d√©finie
      if (result[0] && notes && notes.trim().length > 0 && prochainContact) {
        await createTaskFromProspectComment({
          ...result[0],
          commentaire: notes,
          prochainContact: prochainContact
        });
      }

      res.json(result[0]);
    } catch (error) {
      console.error("Erreur lors de l_ajout du contact:", error);
      res.status(500).json({ error: "Erreur serveur" });
    }
  });

  // GET /api/prospects/stats - Statistiques globales des prospects
  app.get("/api/prospects/stats", async (req, res) => {
    try {
      const allProspects = await db.select()
        .from(prospects)
        .where(isNull(prospects.deletedAt));

      const stats = {
        total: allProspects.length,
        parType: {
          client: allProspects.filter(p => p.type === "client").length,
          vendeur: allProspects.filter(p => p.type === "vendeur").length,
        },
        parStade: {
          nouveau: allProspects.filter(p => p.stade === "nouveau").length,
          contacte: allProspects.filter(p => p.stade === "contacte").length,
          qualifie: allProspects.filter(p => p.stade === "qualifie").length,
          pret_signature: allProspects.filter(p => p.stade === "pret_signature").length,
          converti: allProspects.filter(p => p.stade === "converti").length,
        },
        economiesCalculees: allProspects.filter(p => p.type === "client" && p.economyData && p.economyData.monthlySavings > 0).length,
      };

      res.json(stats);
    } catch (error) {
      console.error("Erreur lors du calcul des statistiques:", error);
      res.status(500).json({ error: "Erreur serveur" });
    }
  });
}